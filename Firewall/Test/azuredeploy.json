{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.35",
    "parameters": {
        "customerName": {
            "type": "string",
            "metadata": {
                "description": "Name of Customer"
            }
        },
        "srcIPInboundNSG": {
            "type": "string",
            "metadata": {
                "description": "Your source public IP address. Added to the inbound NSG on eth0 (MGMT)"
            },
            "defaultValue": "0.0.0.0/0"
        },
        "customData": {
            "type": "string",
            "defaultValue": "echo customData",
            "metadata": {
                "description": "String passed down to the Virtual Machine."
            }
        },
        "imageVersion": {
            "type": "string",
            "allowedValues": [
                "latest",
                "10.1.0",
                "10.0.6",
                "9.1.10"
            ],
            "metadata": {
                "description": "Version number of VM-Series VM in the Azure portal"
            },
            "defaultValue": "latest"
        },
        "vmSize": {
            "type": "string",
            "allowedValues": [
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D4_v3",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_D8_v3",
                "Standard_D16_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3",
                "Standard_F8s_v2",
                "Standard_F32s_v2",
                "Standard_D8_v4",
                "Standard_D16_v4",
                "Standard_D8s_v4",
                "Standard_D16s_v4"
            ],
            "metadata": {
                "description": "Azure VM size for VM-Series"
            },
            "defaultValue": "Standard_D3_v2"
        },
        "vnetNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Use new or existing VNET"
            }
        },
        "virtualNetworkAddressPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "Virtual Network Address CIDR"
            }
        },
        "virtualNetworkExistingRGName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Name of resource group of existing VNET (if applicable)"
            }
        },
        "subnet0Prefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "Mgmt subnet CIDR"
            }
        },
        "subnet1Prefix": {
            "type": "string",
            "defaultValue": "10.0.1.0/24",
            "metadata": {
                "description": "Untrust subnet CIDR"
            }
        },
        "subnet2Prefix": {
            "type": "string",
            "defaultValue": "10.0.2.0/24",
            "metadata": {
                "description": "Trust subnet CIDR"
            }
        },
        "subnet0StartAddress": {
            "type": "string",
            "defaultValue": "10.0.1.4",
            "metadata": {
                "description": "Untrust subnet start address"
            }
        },
        "subnet1StartAddress": {
            "type": "string",
            "defaultValue": "10.0.1.4",
            "metadata": {
                "description": "Untrust subnet start address"
            }
        },
        "subnet2StartAddress": {
            "type": "string",
            "defaultValue": "10.0.2.4",
            "metadata": {
                "description": "Trust subnet start address"
            }
        },
        "authenticationType": {
            "type": "string",
            "metadata": {
                "description": "Type of administrator user authentication "
            },
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "defaultValue": "password"
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username of the administrator account of VM-Series"
            }
        },
        "adminPasswordOrKey": {
            "type": "securestring",
            "metadata": {
                "description": "Password or ssh key for the administrator account of VM-Series."
            }
        },
        "publicIPNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Public IP for mgmt interface is new or existing"
            }
        },
        "publicIPRGName": {
            "type": "string",
            "defaultValue": "None",
            "metadata": {
                "description": "Name of existing public IP resource group"
            }
        },
        "publicIPAllocationMethod": {
            "type": "string",
            "defaultValue": "Dynamic",
            "allowedValues": [
                "Dynamic",
                "Static"
            ],
            "metadata": {
                "description": "Allocation method of public IP resource"
            }
        },
        "bootstrap": {
            "type": "string",
            "defaultValue": "no",
            "allowedValues": [
                "yes",
                "no"
            ],
            "metadata": {
                "description": "Pass bootstrap data to VM"
            }
        },
        "zone": {
            "type": "string",
            "defaultValue": "None",
            "metadata": {
                "description": "Availability Zone for VM-Series"
            }
        },
        "availabilitySetName": {
            "type": "string",
            "defaultValue": "None"
        },
        "availabilitySetPlatformFaultDomainCount": {
            "type": "string",
            "defaultValue": "2"
        },
        "availabilitySetPlatformUpdateDomainCount": {
            "type": "string",
            "defaultValue": "5"
        }
    },
    "variables": {
        "imagePublisher": "paloaltonetworks",
        "imageSku": "byol",
        "imageOffer": "vmseries-flex",
        "customData": "configure\nset network virtual-router Azure\nset zone Outside\nset network interface ethernet ethernet1/1 link-state up\nset network interface ethernet ethernet1/1 layer3\nset network interface ethernet ethernet1/1 layer3 dhcp-client\nset zone Outside network layer3 ethernet1/1\ncommit\n",
        "nsgName": "[concat(parameters('customerName'),'-nsg-default-prod-', resourceGroup().location,'-000')]",
        "vmName": "[concat(parameters('customerName'),'-fw-palo-prod-',resourceGroup().location,'-000')]",
        "nic0Name": "[concat(parameters('customerName'),'-nic-fw-mgmt-prod-',resourceGroup().location,'-000')]",
        "nic1Name": "[concat(parameters('customerName'),'-nic-fw-outside-prod-',resourceGroup().location,'-000')]",
        "nic2Name": "[concat(parameters('customerName'),'-nic-fw-inside-prod-',resourceGroup().location,'-000')]",
        "publicIPAddress0Name": "[concat(parameters('customerName'),'-pip-mgmt-prod-',resourceGroup().location,'-000')]",
        "publicIPAddress1Name": "[concat(parameters('customerName'),'-pip-outside-prod-',resourceGroup().location,'-000')]",
        "FWPrivateIPAddressUntrust": "[parameters('subnet1StartAddress')]",
        "FWPrivateIPAddressTrust": "[parameters('subnet2StartAddress')]",
        "existingVnetID": "[resourceId(parameters('virtualNetworkExistingRGName'),concat('Microsoft.Network','/','virtualNetworks'),variables('virtualNetworkName'))]",
        "subnet0Name": "[concat(parameters('customerName'),'-snet-fw-mgmt-prod-',resourceGroup().location,'-000')]",
        "subnet1Name": "[concat(parameters('customerName'),'-snet-fw-outside-prod-',resourceGroup().location,'-000')]",
        "subnet2Name": "[concat(parameters('customerName'),'-snet-fw-inside-prod-',resourceGroup().location,'-000')]",
        "existingSubnet0Ref": "[concat(variables('existingVnetID'),'/subnets/',variables('subnet0Name'))]",
        "existingSubnet1Ref": "[concat(variables('existingVnetID'),'/subnets/',variables('subnet1Name'))]",
        "existingSubnet2Ref": "[concat(variables('existingVnetID'),'/subnets/',variables('subnet2Name'))]",
        "virtualNetworkName": "[concat(parameters('customerName'),'-vnet-transit-prod-',resourceGroup().location,'-000')]",
        "newVnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
        "newSubnet0Ref": "[concat(variables('newVnetID'),'/subnets/',variables('subnet0Name'))]",
        "newSubnet1Ref": "[concat(variables('newVnetID'),'/subnets/',variables('subnet1Name'))]",
        "newSubnet2Ref": "[concat(variables('newVnetID'),'/subnets/',variables('subnet2Name'))]",
        "vnetID": "[if(equals(parameters('vnetNewOrExisting'),'new'), variables('newVnetID'), variables('existingVnetID'))]",
        "subnet0Ref": "[if(equals(parameters('vnetNewOrExisting'),'new'), variables('newSubnet0Ref'), variables('existingSubnet0Ref'))]",
        "subnet1Ref": "[if(equals(parameters('vnetNewOrExisting'),'new'), variables('newSubnet1Ref'), variables('existingSubnet1Ref'))]",
        "subnet2Ref": "[if(equals(parameters('vnetNewOrExisting'),'new'), variables('newSubnet2Ref'), variables('existingSubnet2Ref'))]",
        "sn0IPArray": "[split(parameters('subnet0Prefix'),'.')]",
        "sn0IPArray2ndString": "[string(variables('sn0IPArray')[3])]",
        "sn0IPArray2nd": "[split(variables('sn0IPArray2ndString'),'/')]",
        "sn0CIDRmask": "[string(int(variables('sn0IPArray2nd')[1]))]",
        "sn0IPArray3": "[string(add(int(variables('sn0IPArray2nd')[0]),1))]",
        "sn0IPArray2": "[string(int(variables('sn0IPArray')[2]))]",
        "sn0IPArray1": "[string(int(variables('sn0IPArray')[1]))]",
        "sn0IPArray0": "[string(int(variables('sn0IPArray')[0]))]",
        "sn0GatewayIP": "[concat(variables('sn0IPArray0'),'.',variables('sn0IPArray1'),'.',variables('sn0IPArray2'),'.',variables('sn0IPArray3'))]",
        "sn0IPStartAddress": "[split(parameters('subnet0StartAddress'),'.')]",
        "sn0IPfw": "[concat(variables('sn0IPArray0'),'.',variables('sn0IPArray1'),'.',variables('sn0IPArray2'),'.',int(variables('sn0IPStartAddress')[3]))]",
        "sn1IPArray": "[split(parameters('subnet1Prefix'),'.')]",
        "sn1IPArray2ndString": "[string(variables('sn1IPArray')[3])]",
        "sn1IPArray2nd": "[split(variables('sn1IPArray2ndString'),'/')]",
        "sn1CIDRmask": "[string(int(variables('sn1IPArray2nd')[1]))]",
        "sn1IPArray3": "[string(add(int(variables('sn1IPArray2nd')[0]),1))]",
        "sn1IPArray2": "[string(int(variables('sn1IPArray')[2]))]",
        "sn1IPArray1": "[string(int(variables('sn1IPArray')[1]))]",
        "sn1IPArray0": "[string(int(variables('sn1IPArray')[0]))]",
        "sn1GatewayIP": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',variables('sn1IPArray3'))]",
        "sn1IPStartAddress": "[split(parameters('subnet1StartAddress'),'.')]",
        "sn1IPfw": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',int(variables('sn1IPStartAddress')[3]))]",
        "sn2IPArray": "[split(parameters('subnet2Prefix'),'.')]",
        "sn2IPArray2ndString": "[string(variables('sn2IPArray')[3])]",
        "sn2IPArray2nd": "[split(variables('sn2IPArray2ndString'),'/')]",
        "sn2CIDRmask": "[string(int(variables('sn2IPArray2nd')[1]))]",
        "sn2IPArray3": "[string(add(int(variables('sn2IPArray2nd')[0]),1))]",
        "sn2IPArray2": "[string(int(variables('sn2IPArray')[2]))]",
        "sn2IPArray1": "[string(int(variables('sn2IPArray')[1]))]",
        "sn2IPArray0": "[string(int(variables('sn2IPArray')[0]))]",
        "sn2GatewayIP": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',variables('sn2IPArray3'))]",
        "sn2IPStartAddress": "[split(parameters('subnet2StartAddress'),'.')]",
        "sn2IPfw": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',int(variables('sn2IPStartAddress')[3]))]",
        "zones": [
            "[parameters('zone')]"
        ],
        "availabilitySet": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
        },
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                        "keyData": "[parameters('adminPasswordOrKey')]"
                    }
                ]
            }
        },
        "subnets": [
            {
                "name": "[variables('subnet0Name')]",
                "properties": {
                    "addressPrefix": "[parameters('subnet0Prefix')]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                    }
                }
            },
            {
                "name": "[variables('subnet1Name')]",
                "properties": {
                    "addressPrefix": "[parameters('subnet1Prefix')]"
                }
            },
            {
                "name": "[variables('subnet2Name')]",
                "properties": {
                    "addressPrefix": "[parameters('subnet2Prefix')]"
                }
            }
        ]
    },
    "resources": [
        {
            "name": "[variables('publicIPAddress0Name')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-08-01",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard"
            },
            "zones": [
                "1",
                "2",
                "3"
            ],
            "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4",
                "dnsSettings": {
                    "domainNameLabel": "[variables('publicIPAddress0Name')]"
                }
            }
        },
        {
            "name": "[variables('publicIPAddress1Name')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-08-01",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard"
            },
            "zones": [
                "1",
                "2",
                "3"
            ],
            "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4",
                "dnsSettings": {
                    "domainNameLabel": "[variables('publicIPAddress1Name')]"
                }
            }
        },
        {
            "name": "[variables('nsgName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2017-10-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "Allow-Outside-From-IP",
                        "properties": {
                            "description": "Rule",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "[parameters('srcIPInboundNSG')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Allow-Intra",
                        "properties": {
                            "description": "Allow intra network traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "[parameters('virtualNetworkAddressPrefix')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 101,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Default-Deny",
                        "properties": {
                            "description": "Default-Deny if we don't match Allow rule",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "name": "[variables('virtualNetworkName')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2017-10-01",
            "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
            ],
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('virtualNetworkAddressPrefix')]"
                    ]
                },
                "subnets": "[variables('subnets')]"
            }
        },
        {
            "name": "[variables('nic0Name')]",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2017-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddress0Name'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
            ],
            "location": "[resourceGroup().location]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig-mgmt",
                        "properties": {
                            "privateIPAddress": "[variables('sn0IPfw')]",
                            "privateIPAllocationMethod": "Static",
                            "publicIPAddress": {
                                "id": "[if(equals(parameters('publicIPNewOrExisting'), 'existing'), resourceId(parameters('publicIPRGName'), 'Microsoft.Network/publicIPAddresses', variables('publicIPAddress0Name')), resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddress0Name')))]"
                            },
                            "subnet": {
                                "id": "[variables('subnet0Ref')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                }
            }
        },
        {
            "name": "[variables('nic1Name')]",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2017-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddress1Name'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
            ],
            "location": "[resourceGroup().location]",
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": "[if(equals(parameters('imageVersion'), '8.1.9'), 'false', 'true')]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig-untrust",
                        "properties": {
                            "privateIPAddress": "[variables('sn1IPfw')]",
                            "privateIPAllocationMethod": "Static",
                            "publicIPAddress": {
                                "id": "[if(equals(parameters('publicIPNewOrExisting'), 'existing'), resourceId(parameters('publicIPRGName'), 'Microsoft.Network/publicIPAddresses', variables('publicIPAddress1Name')), resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddress1Name')))]"
                            },
                            "subnet": {
                                "id": "[variables('subnet1Ref')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "name": "[variables('nic2Name')]",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2017-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddress0Name'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
            ],
            "location": "[resourceGroup().location]",
            "properties": {
                "enableIPForwarding": true,
                "enableAcceleratedNetworking": "[if(equals(parameters('imageVersion'), '8.1.9'), 'false', 'true')]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig-trust",
                        "properties": {
                            "privateIPAddress": "[variables('sn2IPfw')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('subnet2Ref')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "name": "[parameters('availabilitySetName')]",
            "type": "Microsoft.Compute/availabilitySets",
            "apiVersion": "2018-06-01",
            "condition": "[not(equals(parameters('availabilitySetName'), 'None'))]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
            ],
            "properties": {
                "platformFaultDomainCount": "[parameters('availabilitySetPlatformFaultDomainCount')]",
                "platformUpdateDomainCount": "[parameters('availabilitySetPlatformUpdateDomainCount')]"
            },
            "sku": {
                "name": "aligned"
            }
        },
        {
            "name": "[variables('vmName')]",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2018-06-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddress0Name'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddress1Name'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nic0Name'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nic1Name'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nic2Name'))]",
                "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            ],
            "location": "[resourceGroup().location]",
            "plan": {
                "name": "[variables('imageSku')]",
                "product": "[variables('imageOffer')]",
                "publisher": "[variables('imagePublisher')]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPasswordOrKey')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]",
                    "customData": "[if(equals(parameters('bootstrap'), 'no'), json('null'), base64(variables('customData')))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('imageSku')]",
                        "version": "[parameters('imageVersion')]"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nic0Name'))]",
                            "properties": {
                                "primary": true
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nic1Name'))]",
                            "properties": {
                                "primary": false
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nic2Name'))]",
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                },
                "availabilitySet": "[if(equals(parameters('availabilitySetName'), 'None'), json('null'), variables('availabilitySet'))]"
            },
            "zones": "[if(equals(parameters('zone'), 'None'), json('null'), variables('zones'))]"
        }
    ]
}